// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  name               String?
  role               Role                @default(RESIDENT)
  password           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  apartment          Apartment?          @relation(fields: [apartmentId], references: [id])
  apartmentId        String?
  unit               Unit?               @relation(fields: [unitId], references: [id])
  unitId             String?
  announcements      Announcement[]
  payments           Payment[]
  expenses           Expense[]
  polls              Poll[]              @relation("PollCreator")
  pollVotes          PollVote[]
  documents          Document[]
  maintenanceRequests MaintenanceRequest[] @relation("MaintenanceCreator")
  assignedMaintenances MaintenanceRequest[] @relation("MaintenanceAssignee")
  maintenanceComments MaintenanceComment[]
  notifications      Notification[]
  bankTransfers      BankTransfer[]      // Kullanıcının yaptığı banka transferleri
  verifiedTransfers  BankTransfer[]      @relation("BankTransferVerifier") // Onayladığı transferler
}

enum Role {
  ADMIN
  MANAGER
  RESIDENT
  SUPER_ADMIN
}

model Apartment {
  id            String         @id @default(uuid())
  code          String         @unique
  name          String
  address       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         User[]
  units         Unit[]
  announcements Announcement[]
  expenses      Expense[]
  polls         Poll[]
  funds         Fund[]
  documents     Document[]
  bankAccounts  BankAccount[]  // Apartmana ait banka hesapları
}

model Unit {
  id          String    @id @default(uuid())
  number      String
  floor       Int
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
  residents   User[]
  dues         Due[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  maintenanceRequests MaintenanceRequest[]

  @@unique([apartmentId, number])
}

model Due {
  id          String   @id @default(uuid())
  amount      Float
  description String
  dueDate     DateTime
  isPaid      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  unit        Unit     @relation(fields: [unitId], references: [id])
  unitId      String
  payment     Payment?
  bankTransfers BankTransfer[] // Aidat için yapılan banka transferleri
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  paymentDate DateTime @default(now())
  stripeId    String?
  status      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  due         Due      @relation(fields: [dueId], references: [id])
  dueId       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Expense {
  id           String    @id @default(uuid())
  amount       Float
  description  String
  receipt      String?   // URL to receipt image
  expenseDate  DateTime
  apartment    Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId  String
  createdBy    User      @relation(fields: [createdById], references: [id])
  createdById  String
  fund         Fund?     @relation(fields: [fundId], references: [id])
  fundId       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Fund {
  id          String    @id @default(uuid())
  name        String
  balance     Float     @default(0)
  description String?
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
  expenses    Expense[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Announcement {
  id          String    @id @default(uuid())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
}

model Poll {
  id          String     @id @default(uuid())
  question    String
  options     String[]
  isActive    Boolean    @default(true)
  endDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation("PollCreator", fields: [createdById], references: [id])
  createdById String
  votes       PollVote[]
  apartment   Apartment  @relation(fields: [apartmentId], references: [id])
  apartmentId String
}

model PollVote {
  id        String   @id @default(uuid())
  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  option    String
  createdAt DateTime @default(now())

  @@unique([pollId, userId])
}

model Document {
  id          String    @id @default(uuid())
  name        String
  url         String
  type        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
}

model MaintenanceRequest {
  id          String              @id @default(uuid())
  title       String
  description String
  status      MaintenanceStatus   @default(PENDING)
  priority    MaintenancePriority @default(MEDIUM)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  completedAt DateTime?
  unit        Unit                @relation(fields: [unitId], references: [id])
  unitId      String
  createdBy   User                @relation("MaintenanceCreator", fields: [createdById], references: [id])
  createdById String
  assignedTo  User?               @relation("MaintenanceAssignee", fields: [assignedToId], references: [id])
  assignedToId String?
  comments    MaintenanceComment[]
}

model MaintenanceComment {
  id          String            @id @default(uuid())
  content     String
  createdAt   DateTime          @default(now())
  request     MaintenanceRequest @relation(fields: [requestId], references: [id])
  requestId   String
  author      User              @relation(fields: [authorId], references: [id])
  authorId    String
}

model Notification {
  id          String   @id @default(uuid())
  type        String   // payment, maintenance, announcement, meeting, document
  title       String
  message     String
  isRead      Boolean  @default(false)
  entityId    String?  // ID of the related entity (payment, maintenance, etc.)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Bank account model for storing apartment's bank accounts
model BankAccount {
  id           String         @id @default(uuid())
  bankName     String
  accountName  String
  iban         String
  accountNumber String?
  branch       String?
  description  String?
  isActive     Boolean        @default(true)
  apartment    Apartment      @relation(fields: [apartmentId], references: [id])
  apartmentId  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  transfers    BankTransfer[]
}

// Bank transfer status enum
enum BankTransferStatus {
  PENDING     // Bildirildi, onay bekliyor
  VERIFIED    // Kontrol edildi, onaylandı
  REJECTED    // Reddedildi
  COMPLETED   // İşlem tamamlandı ve aidata yansıtıldı
}

// Bank transfer model for tracking wire transfers/EFT
model BankTransfer {
  id               String             @id @default(uuid())
  amount           Float
  transferDate     DateTime
  referenceCode    String             // Benzersiz havale referans kodu
  senderName       String?            // Havaleyi yapan kişi
  description      String?            // Açıklama
  receiptUrl       String?            // Dekont URL'i
  status           BankTransferStatus @default(PENDING)
  statusNote       String?            // Ret veya onay notu
  
  // İlişkiler
  bankAccount      BankAccount        @relation(fields: [bankAccountId], references: [id])
  bankAccountId    String
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  due              Due?               @relation(fields: [dueId], references: [id])
  dueId            String?            // Opsiyonel, belirli bir aidata yapılan ödeme
  
  // Onay bilgileri
  verifiedBy       User?              @relation("BankTransferVerifier", fields: [verifiedById], references: [id])
  verifiedById     String?
  verifiedAt       DateTime?
  
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([referenceCode])
  @@index([status])
}
