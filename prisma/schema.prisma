// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  name               String?
  role               Role                @default(RESIDENT)
  password           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  apartment          Apartment?          @relation(fields: [apartmentId], references: [id])
  apartmentId        String?
  unit               Unit?               @relation(fields: [unitId], references: [id])
  unitId             String?
  announcements      Announcement[]
  payments           Payment[]
  expenses           Expense[]
  polls              Poll[]              @relation("PollCreator")
  pollVotes          PollVote[]
  documents          Document[]
}

enum Role {
  ADMIN
  MANAGER
  RESIDENT
}

model Apartment {
  id            String         @id @default(uuid())
  code          String         @unique
  name          String
  address       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         User[]
  units         Unit[]
  announcements Announcement[]
  expenses      Expense[]
  polls         Poll[]
  funds         Fund[]
  documents     Document[]
}

model Unit {
  id          String    @id @default(uuid())
  number      String
  floor       Int
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
  residents   User[]
  dues        Due[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([apartmentId, number])
}

model Due {
  id          String   @id @default(uuid())
  amount      Float
  description String
  dueDate     DateTime
  isPaid      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  unit        Unit     @relation(fields: [unitId], references: [id])
  unitId      String
  payment     Payment?
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  paymentDate DateTime @default(now())
  stripeId    String?
  status      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  due         Due      @relation(fields: [dueId], references: [id])
  dueId       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Expense {
  id           String    @id @default(uuid())
  amount       Float
  description  String
  receipt      String?   // URL to receipt image
  expenseDate  DateTime
  apartment    Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId  String
  createdBy    User      @relation(fields: [createdById], references: [id])
  createdById  String
  fund         Fund?     @relation(fields: [fundId], references: [id])
  fundId       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Fund {
  id          String    @id @default(uuid())
  name        String
  balance     Float     @default(0)
  description String?
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
  expenses    Expense[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Announcement {
  id          String    @id @default(uuid())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
}

model Poll {
  id          String     @id @default(uuid())
  question    String
  options     String[]
  isActive    Boolean    @default(true)
  endDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation("PollCreator", fields: [createdById], references: [id])
  createdById String
  votes       PollVote[]
  apartment   Apartment  @relation(fields: [apartmentId], references: [id])
  apartmentId String
}

model PollVote {
  id        String   @id @default(uuid())
  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  option    String
  createdAt DateTime @default(now())

  @@unique([pollId, userId])
}

model Document {
  id          String    @id @default(uuid())
  name        String
  url         String
  type        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
}
